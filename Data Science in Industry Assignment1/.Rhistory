mult_3_or_5 <- function(maxnum) {
total <- 0
num <- 0
while (num <= maxnum) {
if (num %% 5 == 0 || num %% 3 == 0) {
total <- total + num
}
num <- num + 1
}
return(total)
}
result <- mult_3_or_5(1000)
print(result)
lowest_common_mult <- function() {
lowest_num <- 2520 # we know lcm upto 10
numbers_list <- c(11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
goal <- FALSE
while (!goal) {
goal <- TRUE
lowest_num <- lowest_num + 2520
for (num in numbers_list) {
if (lowest_num %% num != 0) {
goal = FALSE
}
}
}
return (lowest_num)
}
result <- lowest_common_mult()
print(result)
sum_of_primes <- function(max_num){
sum_total <- 2
for (number in range(3:max_num+1)) {
prime <- TRUE
for (x in range(2:number)) {
if (number %% x == 0) {
prime <- FALSE
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(2000000)
print(result3)
sum_of_primes <- function(max_num){
sum_total <- 2
for (number in range(3:max_num)) {
prime <- TRUE
for (x in range(2:number-1)) {
if (number %% x == 0) {
prime <- FALSE
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(2000000)
print(result3)
sum_of_primes <- function(max_num){
sum_total <- 2
for (number in range(3:max_num)) {
prime <- TRUE
for (x in range(2:number-1)) {
if (number %% x == 0) {
prime <- FALSE
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(200)
print(result3)
# Question 10
sum_of_primes <- function(max_num){
sum_total <- 2
for (number in range(3:max_num)) {
prime <- TRUE
for (x in range(2:number-1)) {
if (number %% x == 0) {
prime <- FALSE
break #break inner loop if num not a prime
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(200)
print(result3)
# Question 10
sum_of_primes <- function(max_num){
sum_total <- 2
for (number in range(3:max_num)) {
prime <- TRUE
for (x in range(2:number-1)) {
if (number %% x == 0) {
prime <- FALSE
break #break inner loop if num not a prime
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(200)
print(result3)
# Question 10
sum_of_primes <- function(max_num){
sum_total <- 2
for (number in range(3:max_num)) {
prime <- TRUE
print(paste("Now testing: ", number))
for (x in range(2:number-1)) {
if (number %% x == 0) {
prime <- FALSE
break #break inner loop if num not a prime
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(200)
print(result3)
sum_of_primes <- function(max_num){
sum_total <- 2
for (number in 3:max_num) {
prime <- TRUE
print(paste("Now testing: ", number))
for (x in range(2:number-1)) {
if (number %% x == 0) {
prime <- FALSE
break #break inner loop if num not a prime
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(200)
print(result3)
um_of_primes <- function(max_num){
sum_total <- 2
for (number in 3:max_num) {
prime <- TRUE
print(paste("Now testing: ", number))
for (x in 2:number-1) {
if (number %% x == 0) {
prime <- FALSE
break #break inner loop if num not a prime
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(200)
print(result3)
sum_of_primes <- function(max_num){
sum_total <- 2
for (number in 3:max_num) {
prime <- TRUE
print(paste("Now testing: ", number))
for (x in 2:(number-1)) {
if (number %% x == 0) {
prime <- FALSE
break #break inner loop if num not a prime
}
}
if (prime) {
sum_total <- sum_total + number
}
}
return (sum_total)
}
result3 <- sum_of_primes(200)
print(result3)
shiny::runApp('Desktop/Uni2023/DATA423/Assignment1')
runApp('Desktop/Uni2023/DATA423/Assignment 1 - R shiny.R')
runApp('Desktop/Uni2023/DATA423/Assignment1')
runApp('Desktop/Uni2023/DATA423/Assignment1')
runApp('Desktop/Uni2023/DATA423/Assignment1')
runApp('Desktop/Uni2023/DATA423/Assignment1')
runApp('Desktop/Uni2023/DATA423/Assignment1')
runApp('Desktop/Uni2023/DATA423/Assignment 1 - R shiny.R')
runApp('Desktop/Uni2023/DATA423/Assignment1')
runApp('Desktop/Uni2023/DATA423/Example app for visualising different types of data-20230727')
library(devtools)
install.packages("devtools")
library(devtools)
install_github("edwindj/ffbase", subdir="pkg")
install_github("mtennekes/tabplot")
setwd("/Users/michelle/Desktop/Uni2023/DATA423/Assignment1")
shiny::runApp()
