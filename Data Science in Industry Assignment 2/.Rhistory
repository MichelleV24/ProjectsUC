data = react$cleanData2,
method = "rpart",
na.action = na.rpart)
})
react$model <- mod
})
output$Summary <- renderPrint({
mod <- react$model
req(mod)
print(mod)
})
}
shinyApp(ui = ui6, server = server7, options = list(launch.browser=TRUE))
pMiss <- function(x){ sum(is.na(x))/length(x)*100 }
server7 <- function(input, output) {
react <- reactiveValues(cleanData1=NULL, cleanData2=NULL, recipe=NULL, model=NULL)
onSessionEnded(function() {
stopApp()
})
getData <- reactive({
data("ames", package = "modeldata")
set.seed(193)
ames$Longitude[sample(1:nrow(ames), 1000)] <- NA
ames$Sale_Price <- log(ames$Sale_Price)
ames
})
observe({
# remove excessively missing Vars
data <- getData()
vRatio <- apply(X = data, MARGIN = 2, FUN = pMiss)
react$cleanData1 <- data[, vRatio < input$VarThreshold]
})
observe({
# remove excessively missing Obs
data <- react$cleanData1
req(data)
oRatio <- apply(X = data, MARGIN = 1, FUN = pMiss)
react$cleanData2 <- data[oRatio < input$ObsThreshold, ]
})
output$Missing <- renderPlot({
data <- react$cleanData2
req(data)
visdat::vis_dat(data) +
labs(title = paste("Thresholds VarMiss:", input$VarThreshold, "ObsMiss:", input$ObsThreshold))
}, width = 500)
observe({
data <- react$cleanData2
req(data)
rec <- recipe(Sale_Price ~ ., data)
if (input$ImpMethod == "KNN") {
rec <- step_impute_knn(rec, Longitude, neighbors = 5)
} else if (input$ImpMethod == "Median") {
rec <- step_impute_mode(rec, Longitude)
} else if (input$ImpMethod == "Partial Del") {
rec <- step_naomit(rec, all_predictors(), skip = TRUE)
}
react$recipe <- rec
})
observe({
req(input$Go)
isolate({
req(react$recipe, react$cleanData2)
mod <- caret::train(react$recipe,
data = react$cleanData2,
method = "rpart",
na.action = na.rpart)
})
react$model <- mod
})
output$Summary <- renderPrint({
mod <- react$model
req(mod)
print(mod)
})
}
shinyApp(ui = ui6, server = server7, options = list(launch.browser=TRUE))
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
View(dat)
library(recipes)
library(visdat)
library(caret)
library(rpart)
library(modeldata)
pMiss <- function(x){ sum(is.na(x))/length(x)*100 }
server6 <- function(input, output) {
onSessionEnded(function() {
stopApp()
})
getData <- reactive({
data("ames", package = "modeldata")
set.seed(193)
ames$Longitude[sample(1:nrow(ames), 1000)] <- NA
ames
})
getCleanData1 <- reactive({
# remove excessively missing Vars
data <- getData()
vRatio <- apply(X = data, MARGIN = 2, FUN = pMiss)
data[, vRatio < input$VarThreshold]
})
getCleanData2 <- reactive({
# remove excessively missing Obs
data <- getCleanData1()
oRatio <- apply(X = data, MARGIN = 1, FUN = pMiss)
data[oRatio < input$ObsThreshold, ]
})
output$Missing <- renderPlot({
visdat::vis_dat(getCleanData2()) +
labs(title = paste("Thresholds VarMiss:", input$VarThreshold, "ObsMiss:", input$ObsThreshold))
}, width = 500)
getRecipe <- reactive({
rec <- recipe(Sale_Price ~ ., getCleanData2())
if (input$ImpMethod == "KNN") {
rec <- step_impute_knn(rec, all_predictors(), neighbors = 5)
} else if (input$ImpMethod == "Median") {
rec <- step_impute_mode(rec, Longitude)
} else if (input$ImpMethod == "Partial Del") {
rec <- step_naomit(rec, all_predictors(), skip = TRUE)
}
rec
})
getModel <- reactive({
req(input$Go)
isolate({
caret::train(getRecipe(),
data = getCleanData2(),
method = "rpart",
na.action = na.rpart)
})
})
output$Summary <- renderPrint({
print(getModel())
})
}
ui6 <- fluidPage(
titlePanel("Ames Housing"),
shinyjs::useShinyjs(),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "VarThreshold", label = "Threshold of variable missingness",
min = 1, max = 100, value = 50, post = "%"),
sliderInput(inputId = "ObsThreshold", label = "Threshold of observations missingness",
min = 1, max = 100, value = 50, post = "%"),
selectInput(inputId = "ImpMethod", label = "Imputation method",
choices = c("None", "KNN", "Partial Del","Median"), selected = "None"),
actionButton(inputId = "Go", label = "Train", icon = icon("play"))
),
mainPanel(
withSpinner(
plotOutput(outputId = "Missing")
),
withSpinner(
verbatimTextOutput(outputId = "Summary")
)
)
)
)
shinyApp(ui = ui6, server = server6, options = list(launch.browser=TRUE))
library(recipes)
library(visdat)
library(caret)
library(rpart)
library(modeldata)
pMiss <- function(x){ sum(is.na(x))/length(x)*100 }
server6 <- function(input, output) {
onSessionEnded(function() {
stopApp()
})
getData <- reactive({
data("ames", package = "modeldata")
set.seed(193)
ames$Longitude[sample(1:nrow(ames), 1000)] <- NA
ames
})
getCleanData1 <- reactive({
# remove excessively missing Vars
data <- getData()
vRatio <- apply(X = data, MARGIN = 2, FUN = pMiss)
data[, vRatio < input$VarThreshold]
})
getCleanData2 <- reactive({
# remove excessively missing Obs
data <- getCleanData1()
oRatio <- apply(X = data, MARGIN = 1, FUN = pMiss)
data[oRatio < input$ObsThreshold, ]
})
output$Missing <- renderPlot({
visdat::vis_dat(getCleanData2()) +
labs(title = paste("Thresholds VarMiss:", input$VarThreshold, "ObsMiss:", input$ObsThreshold))
}, width = 500)
getRecipe <- reactive({
rec <- recipe(Sale_Price ~ ., getCleanData2())
if (input$ImpMethod == "KNN") {
rec <- step_impute_knn(rec, all_predictors(), neighbors = 5)
} else if (input$ImpMethod == "Median") {
rec <- step_impute_mode(rec, Longitude)
} else if (input$ImpMethod == "Partial Del") {
rec <- step_naomit(rec, all_predictors(), skip = TRUE)
}
rec
})
getModel <- reactive({
req(input$Go)
isolate({
caret::train(getRecipe(),
data = getCleanData2(),
method = "rpart",
na.action = na.rpart)
})
})
output$Summary <- renderPrint({
print(getModel())
})
}
library(recipes)
library(visdat)
library(caret)
library(rpart)
library(modeldata)
pMiss <- function(x){ sum(is.na(x))/length(x)*100 }
server6 <- function(input, output) {
onSessionEnded(function() {
stopApp()
})
getData <- reactive({
data("ames", package = "modeldata")
set.seed(193)
ames$Longitude[sample(1:nrow(ames), 1000)] <- NA
ames
})
getCleanData1 <- reactive({
# remove excessively missing Vars
data <- getData()
vRatio <- apply(X = data, MARGIN = 2, FUN = pMiss)
data[, vRatio < input$VarThreshold]
})
getCleanData2 <- reactive({
# remove excessively missing Obs
data <- getCleanData1()
oRatio <- apply(X = data, MARGIN = 1, FUN = pMiss)
data[oRatio < input$ObsThreshold, ]
})
output$Missing <- renderPlot({
visdat::vis_dat(getCleanData2()) +
labs(title = paste("Thresholds VarMiss:", input$VarThreshold, "ObsMiss:", input$ObsThreshold))
}, width = 500)
getRecipe <- reactive({
rec <- recipe(Sale_Price ~ ., getCleanData2())
if (input$ImpMethod == "KNN") {
rec <- step_impute_knn(rec, all_predictors(), neighbors = 5)
} else if (input$ImpMethod == "Median") {
rec <- step_impute_mode(rec, Longitude)
} else if (input$ImpMethod == "Partial Del") {
rec <- step_naomit(rec, all_predictors(), skip = TRUE)
}
rec
})
getModel <- reactive({
req(input$Go)
isolate({
caret::train(getRecipe(),
data = getCleanData2(),
method = "rpart",
na.action = na.rpart)
})
})
output$Summary <- renderPrint({
print(getModel())
})
}
ui6 <- fluidPage(
titlePanel("Ames Housing"),
shinyjs::useShinyjs(),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "VarThreshold", label = "Threshold of variable missingness",
min = 1, max = 100, value = 50, post = "%"),
sliderInput(inputId = "ObsThreshold", label = "Threshold of observations missingness",
min = 1, max = 100, value = 50, post = "%"),
selectInput(inputId = "ImpMethod", label = "Imputation method",
choices = c("None", "KNN", "Partial Del","Median"), selected = "None"),
actionButton(inputId = "Go", label = "Train", icon = icon("play"))
),
mainPanel(
withSpinner(
plotOutput(outputId = "Missing")
),
withSpinner(
verbatimTextOutput(outputId = "Summary")
)
)
)
)
shinyApp(ui = ui6, server = server6, options = list(launch.browser=TRUE))
shinyApp(ui = ui6, server = server7, options = list(launch.browser=TRUE))
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
shiny::runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
View(dat)
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
runApp('Desktop/Uni2023/DATA423/Assignment2Data423')
covid_dat <- read.csv("Ass2Data.csv",
header = TRUE,
sep =",",
quote ="\"",
na.strings = c(" ","--","-99","NA","N/A"),
stringsAsFactors = TRUE)
setwd("/Users/michelle/Desktop/Uni2023/DATA423/Assignment2Data423")
covid_dat <- read.csv("Ass2Data.csv",
header = TRUE,
sep =",",
quote ="\"",
na.strings = c(" ","--","-99","NA","N/A"),
stringsAsFactors = TRUE)
skim(covid_dat)
head(covid_dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(covid_dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(covid_dat)
runApp()
runApp()
View(covid_dat_shadow)
runApp()
View(covid_dat_shadow)
runApp()
runApp()
runApp()
runApp()
runApp()
View(covid_dat_shadow)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(covid_dat)
runApp()
runApp()
runApp()
runApp()
runApp()
View(covid_dat)
View(covid_dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(test_data)
View(train_data)
runApp()
View(covid_dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("glmnet")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
